import messaging, { RemoteMessage } from "@react-native-firebase/messaging";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
// üí° Expo Notifications ÏûÑÌè¨Ìä∏
import * as Notifications from "expo-notifications";
import { Stack, StackScreenProps, useRouter } from "expo-router";
import * as SecureStore from "expo-secure-store";
import React, { useEffect } from "react";
import { PermissionsAndroid, Platform } from "react-native";

import usePartyStore from "@/entities/carpool/store/usePartyStore";
import { authCode } from "@/entities/common/util/storage";

const queryClient = new QueryClient();

type ChatPageParams = { roomId?: string; startPlace?: string; endPlace?: string };

const DEVICE_ID_KEY = "my_app_device_id_v1";

async function getDeviceIdOrGenerate() {
  const stored = await SecureStore.getItemAsync(DEVICE_ID_KEY);
  if (stored) return stored;
  const newId = `generated-${Date.now()}-${Math.floor(Math.random() * 1e6)}`;
  await SecureStore.setItemAsync(DEVICE_ID_KEY, newId);
  return newId;
}

async function registerFcmToken(token: string) {
  try {
    const deviceId = await getDeviceIdOrGenerate();
    const body = {
      fcmToken: token,
      platform: Platform.OS === "ios" ? "IOS" : "ANDROID",
      deviceId,
      appVersion: "1.0.0",
      bundleOrPackage: "com.myapp",
    };
    const auth = await authCode.get();
    const headers: Record<string, string> = { "Content-Type": "application/json" };
    if (auth) headers["Authorization"] = `Bearer ${auth}`;
    await fetch("https://knu-carpool.store/api/fcm/token", {
      method: "POST",
      headers,
      body: JSON.stringify(body),
    });
    console.log("‚úÖ FCM ÌÜ†ÌÅ∞ ÏÑúÎ≤Ñ Îì±Î°ù ÏÑ±Í≥µ");
  } catch (e) {
    console.log("‚ùå FCM ÌÜ†ÌÅ∞ Îì±Î°ù Ïã§Ìå®", e);
  }
}

// üí° setPartyStoreÏóê ÎåÄÌïú Ï†ïÌôïÌïú ÌÉÄÏûÖ Ï†ïÏùò
type SetPartyStoreFn = (state: { partyId: number | null }) => void;

// FCM Ï¥àÍ∏∞Ìôî Î∞è Î¶¨Ïä§ÎÑà Îì±Î°ù Ìï®Ïàò
const initializeFCM = async (
  router: ReturnType<typeof useRouter>,
  setPartyStore: SetPartyStoreFn, // üí° any ÌÉÄÏûÖ Ï†úÍ±∞
) => {
  // 1. Í∂åÌïú ÏöîÏ≤≠
  if (Platform.OS === "ios") {
    await messaging().requestPermission({ alert: true, sound: true, badge: true });
  }
  if (Platform.OS === "android" && Platform.Version >= 33) {
    await PermissionsAndroid.request(PermissionsAndroid.PERMISSIONS.POST_NOTIFICATIONS);
  }

  // 2. Android Ï±ÑÎÑê ÏÉùÏÑ± (Ï§ëÎ≥µ ÏßÑÎèô/ÏÜåÎ¶¨ Î∞©ÏßÄÎ•º ÏúÑÌï¥ null ÏÑ§Ï†ï)
  if (Platform.OS === "android") {
    await Notifications.setNotificationChannelAsync("fcm_default_channel", {
      name: "Default Channel",
      importance: Notifications.AndroidImportance.MAX,
      // üü¢ ÏàòÏ†ï: ÏßÑÎèô Î∞è ÏÜåÎ¶¨ ÎπÑÌôúÏÑ±Ìôî (OS Í∏∞Î≥∏ ÏïåÎ¶ºÎßå ÏÇ¨Ïö©)
      vibrationPattern: null,
      sound: null,
    });
  }

  // 3. ÌÜ†ÌÅ∞ ÌöçÎìù Î∞è ÏÑúÎ≤Ñ Îì±Î°ù
  const token = await messaging().getToken();
  if (token) {
    console.log("FCM Token:", token);
    await registerFcmToken(token);
  }

  // 4. ÌÜ†ÌÅ∞ Í∞±Ïã† Î¶¨Ïä§ÎÑà Îì±Î°ù
  const unsubscribeTokenRefresh = messaging().onTokenRefresh(registerFcmToken);

  // 5. Ìè¨Í∑∏ÎùºÏö¥Îìú Î©îÏãúÏßÄ Î¶¨Ïä§ÎÑà Îì±Î°ù (Expo NotificationsÎ°ú ÏßÅÏ†ë ÎùÑÏö∞Î©∞ ÏßÑÎèô/ÏÜåÎ¶¨ Ï†úÍ±∞)
  const unsubscribeOnMessage = messaging().onMessage(async (remoteMessage) => {
    console.log("FCM Ìè¨Í∑∏ÎùºÏö¥Îìú Î©îÏãúÏßÄ ÏàòÏã†", remoteMessage);

    const title = remoteMessage.notification?.title || remoteMessage.data?.title || "ÏÉà ÏïåÎ¶º";
    const body = remoteMessage.notification?.body || remoteMessage.data?.body || "";

    // Expo NotificationsÎ°ú ÏïåÎ¶º ÏßÅÏ†ë ÌëúÏãú: ÏßÑÎèô/ÏÜåÎ¶¨ ÎπÑÌôúÏÑ±Ìôî
    await Notifications.scheduleNotificationAsync({
      content: {
        title: title,
        body: body,
        data: remoteMessage.data,
        sound: false,
        vibration: false,
        channelId: "fcm_default_channel",
      },
      trigger: {
        seconds: 1,
      },
    });
  });

  // 6. Î∞±Í∑∏ÎùºÏö¥Îìú/Ï¢ÖÎ£å ÏÉÅÌÉú ÏïåÎ¶º ÌÅ¥Î¶≠ Ï≤òÎ¶¨ (Îî•ÎßÅÌÅ¨)
  const handleNotificationClick = (remoteMessage: RemoteMessage | null) => {
    // üí° any ÌÉÄÏûÖ Ï†úÍ±∞
    const data = remoteMessage?.data;
    if (data?.type === "CHAT_MESSAGE" && data?.partyId) {
      setPartyStore({ partyId: Number(data.partyId) });
      router.push({ pathname: "/chatpage", params: { roomId: data.partyId } });
    }
  };

  const unsubscribeOpened = messaging().onNotificationOpenedApp(handleNotificationClick);

  // 7. Ï¢ÖÎ£å ÏÉÅÌÉú ÌÅ¥Î¶≠ Ï≤òÎ¶¨
  messaging().getInitialNotification().then(handleNotificationClick);

  // 8. ÌÅ¥Î¶∞ÏóÖ Ìï®Ïàò Î∞òÌôò
  return () => {
    unsubscribeTokenRefresh();
    unsubscribeOnMessage();
    unsubscribeOpened();
  };
};

// üí° Ìè¨Í∑∏ÎùºÏö¥ÎìúÏóêÏÑú ÏïåÎ¶º Î∞∞ÎÑàÍ∞Ä Î≥¥Ïù¥ÎèÑÎ°ù ÏÑ§Ï†ï (ÏÜåÎ¶¨/ÏßÑÎèôÏùÄ falseÎ°ú Ïú†ÏßÄ)
Notifications.setNotificationHandler({
  handleNotification: async () => ({
    shouldShowAlert: true,
    shouldPlaySound: false,
    shouldSetBadge: false,
  }),
});

export default function RootLayout() {
  const router = useRouter();
  const setPartyStore = usePartyStore((state) => state.setPartyState);

  // FCM Ï¥àÍ∏∞Ìôî
  useEffect(() => {
    let cleanup: () => void;
    initializeFCM(router, setPartyStore).then((c) => {
      cleanup = c;
    });

    return () => {
      if (cleanup) cleanup();
    };
  }, [router, setPartyStore]);

  return (
    <QueryClientProvider client={queryClient}>
      <Stack screenOptions={{ contentStyle: { backgroundColor: "#fff" } }}>
        <Stack.Screen name="(tabs)" options={{ headerShown: false }} />
        <Stack.Screen name="signup" options={{ title: "ÌöåÏõêÍ∞ÄÏûÖ" }} />
        <Stack.Screen name="signin" options={{ title: "Î°úÍ∑∏Ïù∏" }} />
        <Stack.Screen name="carpool/join" options={{ headerShown: false }} />
        <Stack.Screen name="carpool/edit" options={{ headerShown: false }} />
        <Stack.Screen name="carpool/recruit" options={{ headerShown: false }} />
        <Stack.Screen name="carpool/recheck" options={{ headerShown: false }} />
        <Stack.Screen name="carpool/find_track" options={{ headerShown: false }} />
        <Stack.Screen
          name="chatpage"
          options={({ route }: StackScreenProps<{ chatpage: ChatPageParams }>["route"]) => {
            const start = route?.params?.startPlace || "Ï∂úÎ∞úÏßÄ";
            const end = route?.params?.endPlace || "Î™©Ï†ÅÏßÄ";
            return {
              title: route?.params?.roomId ? `Ï±ÑÌåÖÎ∞© ${route.params.roomId}` : `${start} ‚Üí ${end}`,
              headerTintColor: "#000",
              headerStyle: { backgroundColor: "#f2f2f2" },
              headerTitleAlign: "left",
              headerTitleStyle: { fontSize: 15 },
            };
          }}
        />
      </Stack>
    </QueryClientProvider>
  );
}
